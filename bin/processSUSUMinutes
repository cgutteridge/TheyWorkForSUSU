#!/usr/bin/perl 

use XML::DOM;
use Data::Dumper;
use strict;
use warnings;
use utf8;
binmode( STDOUT, ":utf8" );

my $curl_cmd = 'curl -s';
my $pdftoxml_cmd = 'bin/pdftoxml.exe';
my $tmpdir = '/tmp'; # local to where you run the script from
my $tmp = "$tmpdir/$$";

my $pdf_url = $ARGV[0];

`$curl_cmd $pdf_url > $tmp.pdf`;
`$pdftoxml_cmd $tmp.pdf $tmp.xml`;
unlink( "$tmp.pdf" );

my $xml_document = loadXML( "$tmp.xml" );
my $document_structure = xmlToStructure( $xml_document );
my $meeting_data = structureToMeetingData( $document_structure );
print Dumper( $meeting_data );
unlink( "$tmp.xml" );
exit;

sub xmlToStructure
{
	my( $doc ) = @_;
	
	my $vertical_offset = 0;
	my $structure = {};
	foreach my $page ( $doc->getDocumentElement->getChildNodes )
	{
		next unless $page->getNodeName eq "PAGE";
	
		my $page_width = $page->getAttribute( "width" );
		my $page_height = $page->getAttribute( "height" );
	
		foreach my $text_element ( $page->getChildNodes )
		{
			next unless $text_element->getNodeName eq "TEXT";
			my @tokens = ();
			foreach my $token ( $text_element->getChildNodes )
			{
				my @inner_bits = ();
				foreach my $inner ( $token->getChildNodes )
				{
					push @inner_bits, $inner->getNodeValue;
				}
				push @tokens, join( '', @inner_bits );
			}
			my $text = join( ' ', @tokens );
			if( $text =~ m/[a-z]/i )
			{
				my $text2 = $text;
				$text2 =~ s/[^a-z]//ig;
				$text2 =~ s/minutes//ig;
				$text2 =~ s/page//ig;
				$text2 =~ s/of//ig;
				$text2 =~ s/action//ig;
				$text2 =~ s/no//ig;
				$text2 =~ s/discussion//ig;
				$text2 =~ s/item//ig;
				$text2 =~ s/date//ig;

				# skips things which contain words but the only words are probably
				# header & footer text.
				if( $text2 eq "" ) { next; }
			}


			my $rel_x = int( $text_element->getAttribute( "x" ) * 100 / $page_width );
			my $abs_y = int( $text_element->getAttribute( "y" ) + $vertical_offset );

			# shift items in the first 10% of the width to be slightly higher, thus
			# helping the 58.1 be more likely to be above the first line of the item
			# without making it higher than the last line of the previous item.
			if( $rel_x < 10 && $text =~ m/^\d/ ) { $abs_y -= 20; }
			$structure->{$abs_y}->{$rel_x} = $text;
		}
		$vertical_offset += $page_height;
	}

	# flatten structure... items withing 5 vertically to be treated as on the same line.
	foreach my $y ( sort { $a <=> $b } keys %$structure )
	{
		my $row = $structure->{$y};
		next if !defined $row;
		LA: foreach my $look_ahead (1..5 )
		{
			next LA if( !defined $structure->{$y+$look_ahead} );
			foreach my $k ( keys %{$structure->{$y+$look_ahead}} )
		{
				$row->{$k} = $structure->{$y+$look_ahead}->{$k};
				delete $structure->{$y+$look_ahead};
			}
		}
	}

	return $structure;
}	

sub loadXML
{
	my( $filename ) = @_;

	my $parser = new XML::DOM::Parser;
	my $doc = $parser->parsefile( $filename );
	return $doc;
}


sub structureToMeetingData
{
	my( $structure ) = @_;
	
	my $meeting = { info => {}, items => {} };
	my $section = "info";
	my $id;
	foreach my $y ( sort { $a <=> $b } keys %$structure )
	{
		my $row = $structure->{$y};
		
		my @strings = ();
		my @actions = ();
		STRING: foreach my $x ( sort { $a <=> $b } keys %$row )
		{
			next if !defined $row->{$x};
	
			if( $x<10 && $row->{$x} =~ m/^[0-9\.]+$/ )
			{
				# ah, these are now numbered items
				$id = $row->{$x};
				$section = "items";
				next STRING;
			}
			if( $x>75 && $section eq "items" )
			{
				push @actions, $row->{$x};
				next STRING;
			}
			push @strings, $row->{$x};
		}
		my $text = join( ' ', @strings );
		my $action = join( ' ', @actions );
		if( $section eq "info" && $text =~ m/:/ )
		{
			$text =~ s/^([^:]+):\s*//;
			$id = $1;
		}	
		next if( !defined $id );
		
		my $target;
		if( $section eq "items" && $id =~ m/\./ )
		{
			my @parts = split( /\./	, $id );
			$target = $meeting;
			foreach my $subcode ( @parts )
			{
				if( !defined $target->{items}->{$subcode} )
				{
					$target->{items}->{$subcode} = {};
				}
				$target = $target->{items}->{$subcode};
			}
		}
		else
		{
			if( !defined $meeting->{$section}->{$id} )
			{
				$meeting->{$section}->{$id} = {};
			}
			$target = $meeting->{$section}->{$id};
		}
		if( $action ne "" ) 
		{
			if( defined $target->{action} && $target->{action} ne "")
			{
				$target->{action} .= "\n".$action;
			}
			else
			{
				$target->{action} = $action;
			}
		}
		if( defined $target->{text} && $target->{text} ne "")
		{
			$target->{text} .= "\n".$text;
		}
		else
		{
			$target->{text} = $text;
		}
	}
	foreach my $id ( keys %{$meeting->{info}} )
	{
		$meeting->{info}->{$id} = $meeting->{info}->{$id}->{text};
	}
	return $meeting;
}
