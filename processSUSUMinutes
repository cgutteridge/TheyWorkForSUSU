#!/usr/bin/perl 

use XML::DOM;
use Data::Dumper;
use RDF::Helper;
use strict;
use warnings;
use utf8;
binmode( STDOUT, ":utf8" );
binmode( STDERR, ":utf8" );

my $curl_cmd = 'curl -s';
my $pdftoxml_cmd = './pdftoxml.exe -noImage';
my $tmpdir = '/tmp'; # local to where you run the script from
my $tmp = "$tmpdir/$$";

my $pdf_url = $ARGV[0];

`$curl_cmd $pdf_url > $tmp.pdf`;
`$pdftoxml_cmd $tmp.pdf $tmp.xml`;
unlink( "$tmp.pdf" );

my $xml_document = loadXML( "$tmp.xml" );
my $document_structure = xmlToStructure( $xml_document );
unlink( "$tmp.xml" );

my $meeting_data = structureToMeetingData( $document_structure );

#print Dumper( $meeting_data->{info} );
#print join( "\n", keys %{$meeting_data->{info}} )."\n";
my $ns = $pdf_url;
$ns =~ s/\.pdf$//;
$ns .= "#";
my $rdf = meetingToRDF( $meeting_data, $ns, $pdf_url );

my %namespaces = %{$rdf->namespaces};
delete $namespaces{'#default'};
my $serializer = RDF::Trine::Serializer->new( "rdfxml",
						  namespaces => \%namespaces,
						  base_uri => $ns );

$serializer->serialize_model_to_file( *STDOUT, $rdf->model );

exit;

sub meetingToRDF
{
	my( $meeting, $ns, $source_document_url ) = @_;

 	my $rdf = RDF::Helper->new(
      		BaseInterface => 'RDF::Trine',
      		namespaces => {
          		dc => 'http://purl.org/dc/terms/',
			foaf => 'http://xmlns.com/foaf/0.1/',
          		rdf => "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
          		meet => "http://purl.org/openorg/meetings/",
			event => "http://purl.org/NET/c4dm/event.owl#",
			rdfs => "http://www.w3.org/2000/01/rdf-schema#",
			xsd => "http://www.w3.org/2001/XMLSchema#",
			tl => "http://purl.org/NET/c4dm/timeline.owl#",
			ov => "http://open.vocab.org/terms/",
     		},
     		ExpandQNames => 1
  	);

	# The basic structure; it's a meeting of a group described by the
	# PDF file.
	$rdf->assert_resource( $ns."meeting", "rdf:type", "meet:Meeting" );
	$rdf->assert_resource( $ns."meeting", "meet:meetingOf", $ns."group" );
	$rdf->assert_resource( $source_document_url, "foaf:primaryTopic", $ns."meeting" );
	$rdf->assert_resource( $ns."group", "rdf:type", "foaf:Group" );

	# then the metadata we can find, and the attendees and no-shows
	INFO: foreach my $k ( keys %{$meeting->{info}} )
	{
		my $v = $meeting->{info}->{$k};
		if( $k =~ m/name of committee/i )
		{
			$rdf->assert_literal( $ns."group", "rdfs:label", $v );
			next INFO;
		}

		if( $k =~ m/meeting title/i )
		{
			$rdf->assert_literal( $ns."meeting", "rdfs:label", $v );
			next INFO;
		}

		my @attendence;
		@attendence = ("meet:absent","meet:absentWithoutApologies") if( $k =~ m/without apologies/i );
		@attendence = ("meet:absent","meet:absentWithApologies") if( $k =~ m/^apologies/i );
		@attendence = ("meet:present") if( $k =~ m/by invitation/i );
		@attendence = ("meet:present") if( $k =~ m/^in attendance/i );
		@attendence = ("meet:present") if( $k =~ m/^with|present$/i );
		@attendence = ("meet:present","meet:presentMember") if( $k =~ m/members present/i );
		if( scalar @attendence )
		{
			PERSON: foreach my $person ( split( /\n/, $v ) )
			{
				next PERSON if( ! $person =~ m/[a-z]/i ); # people have words!
				my $chair = 0;
				$chair = 1 if( $person=~s/\s*\(Chair\)//i );
			
				my $id = $person;
				$id =~ s/\b([a-z])/\u$1/g;
				$id =~ s/[^a-z]//ig;
				my $person_uri = $ns."person-$id";
				$rdf->assert_literal( $person_uri, "rdfs:label", $person );
				$rdf->assert_resource( $person_uri, "rdf:type", "foaf:Person" );
				foreach my $rel ( @attendence )
				{
					$rdf->assert_resource( $ns."meeting", $rel, $person_uri );
				}
				if( $chair )
				{
					$rdf->assert_resource( $ns."meeting", "meet:chair", $person_uri );
				}
			}
			next INFO;
		}

		if( $k =~ m/location|place/i )
		{
			$rdf->assert_resource( $ns."meeting", "event:place", $ns."place" );
			$rdf->assert_literal( $ns."place", "rdfs:label", $v );
			next INFO;
		}

		# OK at this point it's probably the date & time or some junk 

		my $combined = "$k $v";
		if( $combined =~ m/(\d+).*(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).*((19|20)\d\d)/i )
		{
			my( $day, $mon, $year ) = ( $1,$2,$3 );
			$mon={
				Jan=>1, Feb=>2, Mar=>3, Apr=>4,
				May=>5, Jun=>6, Jul=>7, Aug=>8,
				Sep=>9, Oct=>10, Nov=>11, Dec=>12,
			}->{$mon};
			$rdf->assert_resource( $ns."meeting", "event:time", $ns."date" );
			$rdf->assert_resource( $ns."date", "rdf:type", "tl:Instant" );
			$rdf->assert_resource( $ns."date", "tl:at", 
  				$rdf->new_literal( 
					sprintf( "%04d-%02d-%02d", $year,$mon,$day), 
					undef, 
					"xsd:date" ) );

		}
	}

	# Lastly the data on the items in the minutes
	foreach my $item_id ( keys %{$meeting->{items}} )
	{
		my $item = $meeting->{items}->{$item_id};
		$rdf->assert_resource( $ns."meeting", "meet:minuteItem", $ns."item-$item_id" );
		itemToRDF( $rdf, $item, $item_id, $ns, "" );
	}
	#print Dumper( $meeting->{items} );

	return $rdf;
}

sub itemToRDF
{
	my( $rdf, $item, $n, $ns, $id_prefix ) = @_;

	$rdf->assert_resource( $ns."item-$id_prefix$n", "meet:atMeeting", $ns."meeting" );
	$rdf->assert_resource( $ns."item-$id_prefix$n", "rdf:type", "meet:Item" );
	$rdf->assert_literal( $ns."item-$id_prefix$n", "rdfs:label", "$id_prefix$n" );
	$rdf->assert_literal( $ns."item-$id_prefix$n", "ov:rank",
  				$rdf->new_literal( $n, undef, "xsd:int" ) );
	if( $item->{text} )
	{
		$rdf->assert_literal( $ns."item-$id_prefix$n", "meet:minute", $item->{text} );
	}
	if( $item->{action} )
	{
		$rdf->assert_literal( $ns."item-$id_prefix$n", "meet:action", $ns."item-$id_prefix$n-action" );
		$rdf->assert_literal( $ns."item-$id_prefix$n-action", "rdfs:label", $item->{action} );
	}
	foreach my $item_id ( keys %{$item->{items}} )
	{
		my $item = $item->{items}->{$item_id};
		$rdf->assert_resource( $ns."item-$id_prefix$n", "meet:subItem", $ns."item-$id_prefix$n.$item_id" );
		itemToRDF( $rdf, $item, $item_id, $ns, "$id_prefix$n." );
	}
	
}	


sub xmlToStructure
{
	my( $doc ) = @_;
	
	my $vertical_offset = 0;
	my $structure = {};
	foreach my $page ( $doc->getDocumentElement->getChildNodes )
	{
		next unless $page->getNodeName eq "PAGE";
	
		my $page_width = $page->getAttribute( "width" );
		my $page_height = $page->getAttribute( "height" );
	
		foreach my $text_element ( $page->getChildNodes )
		{
			next unless $text_element->getNodeName eq "TEXT";
			my @tokens = ();
			foreach my $token ( $text_element->getChildNodes )
			{
				my @inner_bits = ();
				foreach my $inner ( $token->getChildNodes )
				{
					push @inner_bits, $inner->getNodeValue;
				}
				push @tokens, join( '', @inner_bits );
			}
			my $text = join( ' ', @tokens );
			if( $text =~ m/[a-z]/i )
			{
				my $text2 = $text;
				$text2 =~ s/[^a-z]//ig;
				$text2 =~ s/minutes//ig;
				$text2 =~ s/page//ig;
				$text2 =~ s/of//ig;

				# skips things which contain words but the only words are probably
				# header & footer text.
				if( $text2 eq "" ) { next; }
			}


			my $rel_x = int( $text_element->getAttribute( "x" ) * 100 / $page_width );
			my $abs_y = int( $text_element->getAttribute( "y" ) + $vertical_offset );
		
			# lose the trailing date on the items table header row
			next if( $rel_x > 70 && $text eq "Date" );

			# shift items in the first 10% of the width to be slightly higher, thus
			# helping the 58.1 be more likely to be above the first line of the item
			# without making it higher than the last line of the previous item.
			# if( $rel_x < 10 && $text =~ m/^\d/ ) { $abs_y -= 20; }
			$structure->{$abs_y}->{$rel_x} = $text;
		}
		$vertical_offset += $page_height;
	}

	# flatten structure... items withing 5 vertically to be treated as on the same line.
	foreach my $y ( sort { $a <=> $b } keys %$structure )
	{
		my $row = $structure->{$y};
		next if !defined $row;
		LA: foreach my $look_ahead (1..10 )
		{
			next LA if( !defined $structure->{$y+$look_ahead} );
			foreach my $k ( keys %{$structure->{$y+$look_ahead}} )
		{
				$row->{$k} = $structure->{$y+$look_ahead}->{$k};
				delete $structure->{$y+$look_ahead};
			}
		}
	}

	return $structure;
}	

sub loadXML
{
	my( $filename ) = @_;

	my $parser = new XML::DOM::Parser;
	my $doc = $parser->parsefile( $filename );
	return $doc;
}


sub structureToMeetingData
{
	my( $structure ) = @_;
	
	my $meeting = { info => {}, items => {} };
	my $section = "info";
	my $id;
	ROW: foreach my $y ( sort { $a <=> $b } keys %$structure )
	{
		my $row = $structure->{$y};
		
		my @strings = ();
		my @actions = ();
		STRING: foreach my $x ( sort { $a <=> $b } keys %$row )
		{
			next if !defined $row->{$x};
	
			if( $x<10 && $row->{$x} =~ m/^[0-9\.]+$/ )
			{
				# ah, these are now numbered items
				$id = $row->{$x};
				$section = "items";
				next STRING;
			}
			if( $x>75 && $section eq "items" )
			{
				push @actions, $row->{$x};
				next STRING;
			}
			push @strings, $row->{$x};
		}
		my $text = join( ' ', @strings );
		my $action = join( ' ', @actions );
		if( $text =~ m/^ACTION/ )
		{
			$action = $text;
			$text = "";
			$action =~ s/^ACTION[^a-z0-9]//i;
		}

		next ROW if( $action =~ m/page\s+\d(\s+of\s+\d)?\s*$/i );
		next ROW if( $text =~ m/page\s+\d(\s+of\s+\d)?\s*$/i );
		next ROW if( $text =~ m/item.*discussion.*action/i );

		if( $section eq "info" && $text =~ m/:/ )
		{
			$text =~ s/^([^:]+):\s*//;
			$id = $1;
		}	
		next if( !defined $id );
		
		my $target;
		if( $section eq "items" && $id =~ m/\./ )
		{
			my @parts = split( /\./	, $id );
			$target = $meeting;
			foreach my $subcode ( @parts )
			{
				if( !defined $target->{items}->{$subcode} )
				{
					$target->{items}->{$subcode} = {};
				}
				$target = $target->{items}->{$subcode};
			}
		}
		else
		{
			if( !defined $meeting->{$section}->{$id} )
			{
				$meeting->{$section}->{$id} = {};
			}
			$target = $meeting->{$section}->{$id};
		}
		if( $action ne "" ) 
		{
			if( defined $target->{action} && $target->{action} ne "")
			{
				$target->{action} .= "\n".$action;
			}
			else
			{
				$target->{action} = $action;
			}
		}
		if( defined $target->{text} && $target->{text} ne "")
		{
			$target->{text} .= "\n".$text;
		}
		else
		{
			$target->{text} = $text;
		}
	}
	foreach my $id ( keys %{$meeting->{info}} )
	{
		$meeting->{info}->{$id} = $meeting->{info}->{$id}->{text};
	}
	return $meeting;
}
